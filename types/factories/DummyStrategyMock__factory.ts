/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { DummyStrategyMock } from "../DummyStrategyMock";

export class DummyStrategyMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    bentoBox_: string,
    token_: string,
    overrides?: Overrides
  ): Promise<DummyStrategyMock> {
    return super.deploy(
      bentoBox_,
      token_,
      overrides || {}
    ) as Promise<DummyStrategyMock>;
  }
  getDeployTransaction(
    bentoBox_: string,
    token_: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(bentoBox_, token_, overrides || {});
  }
  attach(address: string): DummyStrategyMock {
    return super.attach(address) as DummyStrategyMock;
  }
  connect(signer: Signer): DummyStrategyMock__factory {
    return super.connect(signer) as DummyStrategyMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyStrategyMock {
    return new Contract(address, _abi, signerOrProvider) as DummyStrategyMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "bentoBox_",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_harvestProfit",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "exit",
    outputs: [
      {
        internalType: "int256",
        name: "amountAdded",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "harvest",
    outputs: [
      {
        internalType: "int256",
        name: "amountAdded",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "val",
        type: "int256",
      },
    ],
    name: "setHarvestProfit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "skim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "actualAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161075c38038061075c8339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b811660a052911b1660805260805160601c60a05160601c6106c061009c6000398061013052806101d1528061032b52806103ad52508061026352806102ef528061042352806104ed52506106c06000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806318fccc76146100675780632e1a7d4d146100a557806363320675146100c25780636939aaf5146100e15780637f8661a1146100fe578063f78cf93a1461011b575b600080fd5b6100936004803603604081101561007d57600080fd5b50803590602001356001600160a01b0316610123565b60408051918252519081900360200190f35b610093600480360360208110156100bb57600080fd5b50356101c4565b6100df600480360360208110156100d857600080fd5b503561031b565b005b6100df600480360360208110156100f757600080fd5b5035610320565b6100936004803603602081101561011457600080fd5b50356103a0565b61009361051a565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101a2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805413156101b7575060005482016101be565b5060005482035b92915050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610243576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156102a957600080fd5b505afa1580156102bd573d6000803e3d6000fd5b505050506040513d60208110156102d357600080fd5b50519050808211156102e25750805b6103166001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610520565b919050565b600055565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461039d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b50565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461041f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561048e57600080fd5b505afa1580156104a2573d6000803e3d6000fd5b505050506040513d60208110156104b857600080fd5b505160008054858303945091925012156104d857600054820191506104e0565b600054820391505b6105146001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610520565b50919050565b60005481565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b6020831061059d5780518252601f19909201916020918201910161057e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146105ff576040519150601f19603f3d011682016040523d82523d6000602084013e610604565b606091505b5091509150818015610632575080511580610632575080806020019051602081101561062f57600080fd5b50515b610683576040805162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015290519081900360640190fd5b505050505056fea26469706673582212201d4ee805b6572241970219fdc66cdc6658fd434a170772c97b8d49d81040e15864736f6c634300060c0033";
