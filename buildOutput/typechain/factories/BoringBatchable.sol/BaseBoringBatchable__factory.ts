/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BaseBoringBatchable,
  BaseBoringBatchableInterface,
} from "../../BoringBatchable.sol/BaseBoringBatchable";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "calls",
        type: "bytes[]",
      },
      {
        internalType: "bool",
        name: "revertOnFail",
        type: "bool",
      },
    ],
    name: "batch",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103f0806100206000396000f3fe60806040526004361061001e5760003560e01c8063d2423b5114610023575b600080fd5b610036610031366004610186565b610038565b005b60005b8281101561011857600060603086868581811061005457fe5b90506020028101906100669190610324565b6040516100749291906102c3565b600060405180830381855af49150503d80600081146100af576040519150601f19603f3d011682016040523d82523d6000602084013e6100b4565b606091505b5091509150811580156100c45750835b1561010e576100d28161011e565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010591906102d3565b60405180910390fd5b505060010161003b565b50505050565b6060604482511015610164575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610181565b6004820191508180602001905181019061017e919061020a565b90505b919050565b60008060006040848603121561019a578283fd5b833567ffffffffffffffff808211156101b1578485fd5b818601915086601f8301126101c4578485fd5b8135818111156101d2578586fd5b87602080830285010111156101e5578586fd5b6020928301955093505084013580151581146101ff578182fd5b809150509250925092565b60006020828403121561021b578081fd5b815167ffffffffffffffff80821115610232578283fd5b818401915084601f830112610245578283fd5b815181811115610253578384fd5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401168201018181108482111715610291578586fd5b6040528181528382016020018710156102a8578485fd5b6102b982602083016020870161038e565b9695505050505050565b6000828483379101908152919050565b60006020825282518060208401526102f281604085016020870161038e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610358578283fd5b83018035915067ffffffffffffffff821115610372578283fd5b60200191503681900382131561038757600080fd5b9250929050565b60005b838110156103a9578181015183820152602001610391565b83811115610118575050600091015256fea2646970667358221220105e3b1e5f50bbdca11b8b101a5afaf71c2212fb638d897376a1988fca95381764736f6c634300060c0033";

type BaseBoringBatchableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseBoringBatchableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseBoringBatchable__factory extends ContractFactory {
  constructor(...args: BaseBoringBatchableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BaseBoringBatchable";
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BaseBoringBatchable> {
    return super.deploy(overrides || {}) as Promise<BaseBoringBatchable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BaseBoringBatchable {
    return super.attach(address) as BaseBoringBatchable;
  }
  override connect(signer: Signer): BaseBoringBatchable__factory {
    return super.connect(signer) as BaseBoringBatchable__factory;
  }
  static readonly contractName: "BaseBoringBatchable";

  public readonly contractName: "BaseBoringBatchable";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseBoringBatchableInterface {
    return new utils.Interface(_abi) as BaseBoringBatchableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseBoringBatchable {
    return new Contract(address, _abi, signerOrProvider) as BaseBoringBatchable;
  }
}
