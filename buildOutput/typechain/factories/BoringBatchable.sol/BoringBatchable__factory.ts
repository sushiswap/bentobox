/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BoringBatchable,
  BoringBatchableInterface,
} from "../../BoringBatchable.sol/BoringBatchable";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "calls",
        type: "bytes[]",
      },
      {
        internalType: "bool",
        name: "revertOnFail",
        type: "bool",
      },
    ],
    name: "batch",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permitToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105af806100206000396000f3fe6080604052600436106100295760003560e01c80637c516e941461002e578063d2423b5114610050575b600080fd5b34801561003a57600080fd5b5061004e6100493660046102cf565b610063565b005b61004e61005e36600461024b565b6100fd565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169063d505accf906100c1908a908a908a908a908a908a908a9060040161041f565b600060405180830381600087803b1580156100db57600080fd5b505af11580156100ef573d6000803e3d6000fd5b505050505050505050505050565b60005b828110156101dd57600060603086868581811061011957fe5b905060200281019061012b91906104be565b60405161013992919061040f565b600060405180830381855af49150503d8060008114610174576040519150601f19603f3d011682016040523d82523d6000602084013e610179565b606091505b5091509150811580156101895750835b156101d357610197816101e3565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ca919061046d565b60405180910390fd5b5050600101610100565b50505050565b6060604482511015610229575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610246565b600482019150818060200190518101906102439190610356565b90505b919050565b60008060006040848603121561025f578283fd5b833567ffffffffffffffff80821115610276578485fd5b818601915086601f830112610289578485fd5b813581811115610297578586fd5b87602080830285010111156102aa578586fd5b6020928301955093505084013580151581146102c4578182fd5b809150509250925092565b600080600080600080600080610100898b0312156102eb578384fd5b88356102f681610554565b9750602089013561030681610554565b9650604089013561031681610554565b9550606089013594506080890135935060a089013560ff81168114610339578384fd5b979a969950949793969295929450505060c08201359160e0013590565b600060208284031215610367578081fd5b815167ffffffffffffffff8082111561037e578283fd5b818401915084601f830112610391578283fd5b81518181111561039f578384fd5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011682010181811084821117156103dd578586fd5b6040528181528382016020018710156103f4578485fd5b610405826020830160208701610528565b9695505050505050565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b600060208252825180602084015261048c816040850160208701610528565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126104f2578283fd5b83018035915067ffffffffffffffff82111561050c578283fd5b60200191503681900382131561052157600080fd5b9250929050565b60005b8381101561054357818101518382015260200161052b565b838111156101dd5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461057657600080fd5b5056fea26469706673582212204119e16e2407db9cd9fd954c82dfbeca9767f6ef363fa538b34468174d2476a064736f6c634300060c0033";

type BoringBatchableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BoringBatchableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BoringBatchable__factory extends ContractFactory {
  constructor(...args: BoringBatchableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BoringBatchable";
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BoringBatchable> {
    return super.deploy(overrides || {}) as Promise<BoringBatchable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BoringBatchable {
    return super.attach(address) as BoringBatchable;
  }
  override connect(signer: Signer): BoringBatchable__factory {
    return super.connect(signer) as BoringBatchable__factory;
  }
  static readonly contractName: "BoringBatchable";

  public readonly contractName: "BoringBatchable";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BoringBatchableInterface {
    return new utils.Interface(_abi) as BoringBatchableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BoringBatchable {
    return new Contract(address, _abi, signerOrProvider) as BoringBatchable;
  }
}
